#!/usr/bin/env python

from task_machine.StateMachine import StateMachine
import rospy

positive_adjectives = ["great","super", "fun", "entertaining", "easy"]
negative_adjectives = ["boring", "difficult", "ugly", "bad"]

def start_transitions_hold(txt):
    print "HOLDING start_transitions_hold"
    splitted_txt = txt.split(None,1)
    word, txt = splitted_txt if len(splitted_txt) > 1 else (txt,"")
    if word == "Python":
        newState = "Python_state"
    else:
        newState = "error_state"
    return (newState, txt)

def start_transitions(txt):
    print "start"
    splitted_txt = txt.split(None,1)
    word, txt = splitted_txt if len(splitted_txt) > 1 else (txt,"")
    if word == "Python":
        newState = "Python_state"
    else:
        newState = "error_state"
    return (newState, txt)

def python_state_transitions_hold(txt):
	print "HOLDING python_state_transitions_hold"
def python_state_transitions(txt):
    print "python_trans"
    splitted_txt = txt.split(None,1)
    word, txt = splitted_txt if len(splitted_txt) > 1 else (txt,"")
    if word == "is":
        newState = "is_state"
    else:
        newState = "error_state"
    return (newState, txt)

def is_state_transitions_hold(txt):
	print "HOLDING is_state_transitions_hold"
def is_state_transitions(txt):
    print "is_trans"
    splitted_txt = txt.split(None,1)
    word, txt = splitted_txt if len(splitted_txt) > 1 else (txt,"")
    if word == "not":
        newState = "not_state"
    elif word in positive_adjectives:
        newState = "pos_state"
    elif word in negative_adjectives:
        newState = "neg_state"
    else:
        newState = "error_state"
    return (newState, txt)

def not_state_transitions_hold(txt):
	print "HOLDING not_state_transitions_hold"
def not_state_transitions(txt):
    print "not_trans"
    splitted_txt = txt.split(None,1)
    word, txt = splitted_txt if len(splitted_txt) > 1 else (txt,"")
    if word in positive_adjectives:
        newState = "neg_state"
    elif word in negative_adjectives:
        newState = "pos_state"
    else:
        newState = "error_state"
    return (newState, txt)

def neg_state_hold(txt):
	print "HOLDING START"
def neg_state(txt):
    print("Hallo")
    return ("neg_state", "")

if __name__== "__main__":
    rospy.init_node("exampleState")
    m = StateMachine()
    m.add_state("Start", start_transitions, start_transitions_hold)
    m.add_state("Python_state", python_state_transitions, python_state_transitions_hold)
    m.add_state("is_state", is_state_transitions,is_state_transitions_hold)
    m.add_state("not_state", not_state_transitions, not_state_transitions_hold)
    m.add_state("neg_state", None, end_state=1)
    m.add_state("pos_state", None, end_state=1)
    m.add_state("error_state", None, end_state=1)
    m.set_start("Start")
    m.run("Python is great")
    #m.run("Python is difficult")
    #m.run("Perl is ugly")